# Ported from https://rosettacode.org/wiki/Weird_numbers#Ruby

!yamlscript/v0

defn main(max=25):
  w =: sieve(17000)
  say: "The first $max weird numbers:"
  loop n 2, count 0:
    when count < max:
      recur (n + 2):
        if not(w.$n):
          then:
            print: "$n "
            inc: count
          else: count
  say: ''

defn sieve(limit):
  loop i 2, w1 vec([false] * limit):
    if i < limit:
      recur (i + 2):
        if not(w1.$i):
          then:
            divs =: divisors(i)
            if not(abundant(i divs)):
              assoc w1: i true
              if semiperfect(i divs):
                loop j i, w3 w1:
                  if j < limit:
                    recur: (j + i) assoc(w3 j true)
                    else: w3
                else: w1
          else: w1
      else: w1

defn divisors(n):
  loop divs [1], divs2 [], i 2:
    if sqr(i) <= n:
      if f?(n % i):
        then:
          divs .=: conj(i)
          j =: n / i
          divs2 =:
            if i != j:
              divs2.conj(j)
              divs2
          recur: divs divs2 i.inc()
        else:
          recur: divs divs2 i.inc()
      concat divs2: divs.reverse()

defn abundant(n, divs):
  sum(divs*) > n

defn semiperfect(n, divs):
  when divs.count() > 0:
    +[h & t] =: divs
    if n < h:
      semiperfect: n t
      or:
        (n == h)
        semiperfect((n - h) t)
        semiperfect(n t)
